# PUNTO 4
# Este código recolecta datos de uso de la CPU, RAM y estado de la batería de un sistema 
# y los publica en un broker MQTT local. Además, verifica si estos valores superan un umbral 
# definido (80% para CPU y RAM). Si se supera el umbral, los datos se envían a Firebase, donde 
# se guardan junto con una marca de tiempo en la base de datos en las rutas específicas para 
# cada métrica (/cpu, /ram, /battery). Los datos se actualizan cada 10 segundos.

# Nota: Este codigo sobreescribe los datos y pone los mas actuales para que en APP Invertor
# se pueda mostrar estos datos

import paho.mqtt.client as mqtt
import psutil
import time
import firebase_admin
from firebase_admin import credentials, db

# Configuración del cliente MQTT
broker = "localhost"  # Cambia esto si tu broker no está en localhost
port = 1883

# Crear una instancia del cliente MQTT
mqtt_client = mqtt.Client()

# Conectar al broker MQTT
mqtt_client.connect(broker, port, 60)

# Inicializar la aplicación de Firebase
cred = credentials.Certificate('recuperacion-f115c-firebase-adminsdk-kiza7-1e1e18bdef.json')  # Ruta al archivo de clave privada
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://recuperacion-f115c-default-rtdb.firebaseio.com/'  # URL de tu base de datos en Firebase
})

# Referencia a la base de datos de Firebase
firebase_ref = db.reference('/Temperatura')

# Funciones para obtener datos
def get_cpu_usage():
    return psutil.cpu_percent(interval=2)

def get_ram_usage():
    ram = psutil.virtual_memory()
    return ram.percent

def get_battery_status():
    battery = psutil.sensors_battery()
    return battery.percent if battery else None

# Umbrales para la temperatura de la CPU y uso de la RAM
cpu_threshold = 80
ram_threshold = 80

while True:
    # Recolectar datos
    cpu_usage = get_cpu_usage()
    ram_usage = get_ram_usage()
    battery_status = get_battery_status()

    # Publicar datos en temas MQTT
    mqtt_client.publish("temperatura/cpu", cpu_usage)
    mqtt_client.publish("temperatura/ram", ram_usage)
    mqtt_client.publish("temperatura/bateria", battery_status)

    # Crear un timestamp para incluir en los datos
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")

    # Verificar el umbral y enviar datos a Firebase sin clave
    if cpu_usage > cpu_threshold:
        firebase_ref.child('cpu').set({
            'value': cpu_usage,
            'timestamp': timestamp
        })
    if ram_usage > ram_threshold:
        firebase_ref.child('ram').set({
            'value': ram_usage,
            'timestamp': timestamp
        })
    if battery_status and battery_status > ram_threshold:
        firebase_ref.child('battery').set({
            'value': battery_status,
            'timestamp': timestamp
        })

    # Esperar antes de la siguiente lectura
    time.sleep(15)
